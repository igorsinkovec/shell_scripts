#!/bin/bash
# A user-friendly front for tlp's battery functionality

# battery
version=0.3

# config file
config_file='/usr/local/etc/battery.conf'
stat_file="$HOME/.tlp-stat"

# parameter default values
charge_threshold_start=75
charge_threshold_stop=90
charge_threshold_full=100


#####################################
###       Private functions       ###
#####################################


# gets battery status, writes to a file and outputs the contents
get_stat()
{
  [ -f $stat_file ] || sudo tlp-stat -b > $stat_file
  cat $stat_file
}

# list command names for this script
command_names()
{
  grep '^function' `dirname $0`'/'`basename $0` | sed 's/function //g;s/()//g;s/ # /\t/g'
}

# string replace
replace()
{
  sed "s#$1#$2#g" < /dev/stdin
  echo
}

# divide by 1000 and round to one decimal
divide_and_round ()
{
  in=`cat < /dev/stdin`
  value=`echo $in \\* 0.01 | bc | awk '{print int($1+0.5)}'`
  value=`echo $value \\* 0.1 | bc`
  echo $value
}

# extract a value from a line of text
value_of()
{
  local pattern=$1
  local source=$2
  local limit=$3
  local line=$(grep "$pattern" <<< "$source" | head -n ${limit:-1})
  local value=$(cut -d '=' -f 2 <<< "$line" | replace "\[.*\]" | replace " ")

  echo "$value"
}

valid_battery()
{
  for bat in $(list | cut -c -4); do
    [[ "$bat" == "$1" ]] && return;
  done
  false; return
}

battery_list()
{
  if [ "$1" == "all" ] ; then
    list | cut -c -4; return
  elif valid_battery "$1" ; then
    echo "$1" ; return
  else
    false ; return
  fi
}


#####################################
###       Public functions        ###
#####################################

function list() # List installed batteries
{
  get_stat | grep 'ThinkPad Battery Status' | cut -c 30-
}

function info() # Display detailed battery information
{
  local output="ID | Charge | Status | Power | Start | Stop"
  local charges=($(value_of "Charge" "$(get_stat)" 4 | tail -n 3))

  i=0
  while read bat; do
    local status=$(value_of "$bat/status" "$(get_stat)" | replace 'Unknown(thresholdeffective)' 'Idle')
    local start=$(value_of "$bat/charge_start_threshold" "$(get_stat)")
    local stop=$(value_of "$bat/charge_stop_threshold" "$(get_stat)")
    local power=$(value_of "$bat/power_now" "$(get_stat)" | divide_and_round)
    local charge=${charges[$i]}
    i+=1
    output+="\n$bat | $charge % | $status | $power W | $start % | $stop %"
  done < <(battery_list ${1:-"all"})

  echo -e "$output" | column -t -s '|'
  echo
  list
}

function full() # Charge the battery to the configured "full" threshold
{
  for bat in $(battery_list ${1:-"all"}); do
    sudo tlp setcharge $((charge_threshold_full-4)) $charge_threshold_full $bat
  done
}

function up() # Charge the battery to the configured "stop" threshold
{
  for bat in $(battery_list ${1:-"all"}); do
    sudo tlp setcharge $((charge_threshold_stop-4)) $charge_threshold_stop $bat
  done
}

function keep() # Prolong battery life by keeping the charge between optimal thresholds
{
  for bat in $(battery_list ${1:-"all"}); do
    sudo tlp setcharge $charge_threshold_start $charge_threshold_stop $bat
  done
}

function params() # Display configured parameters
{
  echo "charge_threshold_start:   $charge_threshold_start %"
  echo "charge_threshold_stop:    $charge_threshold_stop %"
  echo "charge_threshold_full:    $charge_threshold_full %"
}

function help() # Display this help and exit
{
  echo -e "Usage: $(basename $0) <command> [<battery_id>]\n"
  echo 'Available commands:'

  command_names | {
    while read c; do
      IFS=$'\t'
      cmd=($c)
      printf "        %-16s%s\n" ${cmd[*]}
    done
  }
}

function version() # Display version information and exit
{
  echo "$(basename $0) v$version"
}


# Load config file
if [ -f $config_file ]; then
. $config_file
fi


# Switch command
if [ $# = 0 ]; then
  # default command
  info
  echo -e "\nType '$(basename $0) help' for more info."
elif command_names | cut -f 1 | grep -qw $1 ; then
  # validate ID argument
  if [ $# = 2 ] && ! valid_battery $2; then
    echo "Battery '$2' is not installed."
  else
    # run command with parameters
    $@
  fi
else
  echo -e "\nError: Unknown command '$1'.\n"
  help
fi

# Cleanup
[ -f $stat_file ] && rm $stat_file

exit 0
